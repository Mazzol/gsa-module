# -*- coding: utf-8 -*-
"""sobol_saltelli.py: Module to generate a set of Sobol'-Saltelli design matrix
The design matrices will be used to evaluate model which outputs are used to
calculate the Sobol' indices
"""
import os
import numpy as np

__author__ = "Damar Wicaksono"


def create(dm1: np.ndarray, dm2: np.ndarray) -> dict:
    r"""Generate Sobol'-Saltelli design matrices

    Sobol'-Saltelli design matrices are used to calculate the Sobol' sensitivity
    indices using Monte Carlo simulation by sampling-resampling scheme as
    proposed in [1]. The design requires :math:`n \times (k+2)` function
    evaluations for the 1st-order and the total-order sensitivity indices and
    :math:`n \times (2k+2)` function evaluations for additional 2nd-order
    sensitivity indices. Where `n` is the number of samples and `k` is the
    number of parameters.

    **References:**

    (1) Andrea Saltelli, et al., "Variance based sensitivity analysis of model
        output. Design and estimator for the total sensitivity index," Computer
        Physics Communications, 181, pp. 259-270, (2010)

    :param dm1: (ndarray) `n`-by-`k` design matrix generated by a sampling
        scheme, the sampling matrix
    :param dm2: (ndarray) `n`-by-`k` design matrix generated by a sampling
        scheme, the re-sampling matrix
    :returns: (dict of ndarray) a dictionary containing pair of keys and numpy
        arrays of which each rows correspond to the normalized (0, 1) parameter
        values for model evaluation
    """
    # Check the consistency of inputs sizes, both have to be the same dimension
    if dm1.shape != dm2.shape:
        raise ValueError("The dimensions of two matrices are not the same!")
    elif dm1.ndim != 2 or dm2.ndim != 2:
        raise ValueError("The matrix dimension has to be 2")
    else:

        # Matrix A and B in a python dict
        sobol_saltelli = dict()
        sobol_saltelli["a"] = dm1
        sobol_saltelli["b"] = dm2

        # AB_i: replace the i-th column of A matrix by i-th column of B matrix
        # These sets of samples are used to calculate the first- and total-order
        # Sobol' indices (together with A and B)
        for i in dm1.shape[1]:
            key = "ab_{}" .format(str(i+1))
            temp = np.copy(dm1)
            temp[:, i] = dm2[:, i]
            sobol_saltelli[key] = temp

        # BA_i: replace the i-th column of B matrix by i-th column of A matrix
        # these sets of samples are used to calculate the second-order Sobol'
        # indices
        for i in dm2.shape[1]:
            key = "ba_{}" .format(i+1)
            temp = np.copy(dm2)
            temp[:, i] = dm1[:, i]
            sobol_saltelli[key] = temp

        return sobol_saltelli


def write(sobol_saltelli: dict, tag: str, fmt="%1.6e"):
    r"""Write Sobol'-Saltelli design matrices into set of files according to key

    The files will be written in csv format, each is a complete design matrix

    :param sobol_saltelli: (dict of ndArray) the Sobol'-Saltelli matrices
    :param tag: (str) the tag for matrices filenames, for identifier purpose
    :param fmt: (str) the print format of the number
    """

    for key in sobol_saltelli:
        fname = "{}_{}.csv" .format(tag, key)
        np.savetxt(fname, sobol_saltelli[key], fmt=fmt, delimiter=",")
